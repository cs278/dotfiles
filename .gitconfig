[user]
	name = Chris Smith
	# email is set by the EMAIL environment variable.

[core]
	excludesfile = ~/.config/git/ignore
	attributesfile = ~/.config/git/attributes

[color]
	ui = True

[merge]
	log = True

[alias]
	ci = commit
	co = checkout
	st = status
	br = branch -vv

	# Shows what changes have been staged
	staged = diff --cached
	pushing = "!git diff `git tracking`..HEAD"

	wdiff = diff --word-diff

	# Finds the branch the local branch tracks.
	tracking = "!git for-each-ref --format=\"%(upstream:short)\" \"$(git symbolic-ref -q HEAD)\" | head -n1"

	# Automagical fast-forward from tracked branch.
	ff = "!u() { git for-each-ref --format=\"%(upstream:short)\" \"$(git symbolic-ref -q HEAD)\" | head -n1; }; git merge --ff-only `u`"

	# Set tracking branch
	track = "!sh -c '[ -z $1 ] && exit 1; branch=$(git symbolic-ref -q HEAD) || exit 1; branch=${branch##refs/heads/}; git branch --set-upstream $branch $1/$branch' -"

	whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
	whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

	# Add all unmerged files
	unmerged-add = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

	# Prune all remotes
	prune-all = !git remote | xargs -n 1 git remote prune

	# <http://www.jukie.net/bart/blog/pimping-out-git-log>
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
	pg = "!git lg \"$(git tracking)\".."

	# git subdo pull
	subdo = submodule foreach git

	# Find parent repository of sub module
	subup = "!sh -c 'cd .. && cd "$(git rev-parse --show-cdup)" && echo $(pwd)' -"

	# Update/init all submodules
	smu = submodule update --init --recursive

	# Amend keeping the name commit message.
	amend = commit --amend -C HEAD

	# Amend and edit message.
	reword = commit --amend

	# Detach from branch to test out a merge or whatnot.
	detach = checkout HEAD^0

	# Inspection
	lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"
	heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"

	pick = cherry-pick

	log = log --date=local
	unstage = rm -r --cached .
	uncommit = reset --soft HEAD^
	nuke = reset --hard

	stat = count-objects -v

	# Maintenance commands

	# <https://github.com/avar/linode-etc/blob/master/bin/cron/git-repack-and-gc-dir>
	packup = "! git repack -qAd; git gc -q --prune; git count-objects -v"

	# Pushs up to a new branch matching the current branch name and sets upstream tracking, assumes a default remote of 'origin'.
	pushup = "!sh -c 'remote=$1; [ -z $remote ] && remote=origin; branch=$(git symbolic-ref -q HEAD) || exit 1; branch=${branch##refs/heads/}; git push --set-upstream $remote $branch' -"

	resolved = "! git ls-files --unmerged | awk '{print $4}' | uniq | xargs git add"

	# Credit the actual author
	# https://speakerdeck.com/u/holman/p/git-and-github-secrets?slide=141
	credit = !"_() { if [ -n \"$1\" ] && [ -n \"$2\" ]; then git commit --amend -C ${3:-HEAD} --author \"$1 <$2>\"; elif [ \"$1\" = \"reset\" ]; then git commit --amend --reset-author -C HEAD; else echo \"Usage: name email\"; return 1; fi; }; _"

[url "git://github.com/"]
	insteadOf = gh:

[url "git@github.com:cs278/"]
	insteadOf = cs278:
	pushInsteadOf = git://github.com/cs278/
	pushInsteadOf = https://github.com/cs278/
	pushInsteadOf = http://github.com/cs278/

[url "git://github.com/phpbb/"]
	insteadOf = git@github.com:phpbb/
	insteadOf = phpbb:

[url "git@github.com:kiddivouchers/"]
	insteadOf = wp:
	insteadOf = https://github.com/kiddivouchers/
	insteadOf = http://github.com/kiddivouchers/
	insteadOf = git://github.com/kiddivouchers/

[url "git@github.com:kohana/"]
	insteadOf = kohana:

[status]
	relativePaths = True
	submodulesummary = 2
[push]
	default = upstream

[rerere]
	enabled = True

[github]
	user = cs278

[diff "image"]
	textconv = identify -verbose
	cachetextconv = true

[diff "json"]
	# Render JSON using Python JSON Tool and fallback to cat
	textconv = "json $1 2>/dev/null || cat $1"
